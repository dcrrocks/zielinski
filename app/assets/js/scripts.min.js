/*!
 * fastshell
 * Fiercely quick and opinionated front-ends
 * https://HosseinKarami.github.io/fastshell
 * @author Hossein Karami
 * @version 1.0.5
 * Copyright 2017. MIT licensed.
 */
jQuery(window).on("load",function(){function s(s){$(s).each(function(){$("<img/>")[0].src=this})}s(["../assets/img/about.jpg","../assets/img/landing.jpg","../assets/img/works/amazon_2on1.jpg","../assets/img/works/checkout_2on2.jpg","../assets/img/works/converse_2on3.jpg","../assets/img/works/fbprofile_2on1.jpg","../assets/img/works/fuel_1on1.jpg","../assets/img/works/koala_1on1.jpg","../assets/img/works/login_2on2.jpg","../assets/img/works/metro_1on1.jpg","../assets/img/works/nr_1on1.jpg","../assets/img/works/nude_1on3.jpg","../assets/img/works/xp_1on2.jpg"])}),function(s,e,o,t){"use strict";function a(){s(this).toggleClass("menuButton-close"),s("body, html").toggleClass("menuOpened"),s("nav").toggleClass("close")}function n(){s("#menu").toggleClass("menuButton-close"),s("body, html").toggleClass("menuOpened"),s("nav").toggleClass("close")}s(function(){}),s("nav ul li a").click(function(e){e.preventDefault(),s("html,body").scrollTo(this.hash,this.hash,{offset:-100})});for(var i=s("nav li").children(),l=[],r=0;r<i.length;r++){var g=i[r],c=s(g).attr("href");l.push(c)}s(e).scroll(function(){for(var t=s(e).scrollTop(),a=s(e).height(),n=s(o).height(),i=0;i<l.length;i++){var r=l[i],g=s(r).offset().top,c=s(r).height();t>=g&&t<g+c?s("a[href='"+r+"']").addClass("active"):s("a[href='"+r+"']").removeClass("active")}if(t+a==n&&!s("nav li:last-child a").hasClass("active")){var h=s(".active").attr("href");s("a[href='"+h+"']").removeClass("nav-active"),s("nav li:last-child a").addClass("active")}}),jQuery("#menu").click(a),jQuery("nav a").click(n),s(".works").isotope({itemSelector:".worksCell",percentPosition:!0,masonry:{columnWidth:".worksCell"}})}(jQuery,window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdHMuanMiXSwibmFtZXMiOlsialF1ZXJ5Iiwid2luZG93Iiwib24iLCJwcmVsb2FkIiwiYXJyYXlPZkltYWdlcyIsIiQiLCJlYWNoIiwic3JjIiwidGhpcyIsImRvY3VtZW50IiwidW5kZWZpbmVkIiwiY2hhbmdlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsImNsb3NlTmF2IiwiY2xpY2siLCJldm4iLCJwcmV2ZW50RGVmYXVsdCIsInNjcm9sbFRvIiwiaGFzaCIsIm9mZnNldCIsImFDaGlsZHJlbiIsImNoaWxkcmVuIiwiYUFycmF5IiwiaSIsImxlbmd0aCIsImFDaGlsZCIsImFocmVmIiwiYXR0ciIsInB1c2giLCJzY3JvbGwiLCJ3aW5kb3dQb3MiLCJzY3JvbGxUb3AiLCJ3aW5kb3dIZWlnaHQiLCJoZWlnaHQiLCJkb2NIZWlnaHQiLCJ0aGVJRCIsImRpdlBvcyIsInRvcCIsImRpdkhlaWdodCIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJoYXNDbGFzcyIsIm5hdkFjdGl2ZUN1cnJlbnQiLCJpc290b3BlIiwiaXRlbVNlbGVjdG9yIiwicGVyY2VudFBvc2l0aW9uIiwibWFzb25yeSIsImNvbHVtbldpZHRoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBQSxPQUFBQyxRQUFBQyxHQUFBLE9BQUEsV0FFQSxRQUFBQyxHQUFBQyxHQUNBQyxFQUFBRCxHQUFBRSxLQUFBLFdBQ0FELEVBQUEsVUFBQSxHQUFBRSxJQUFBQyxPQU1BTCxHQUNBLDBCQUNBLDRCQUNBLHNDQUNBLHdDQUNBLHdDQUNBLHlDQUNBLG9DQUNBLHFDQUNBLHFDQUNBLHFDQUNBLGtDQUNBLG9DQUNBLHNDQUtBLFNBQUFFLEVBQUFKLEVBQUFRLEVBQUFDLEdBRUEsWUEyREEsU0FBQUMsS0FDQU4sRUFBQUcsTUFBQUksWUFBQSxvQkFDQVAsRUFBQSxjQUFBTyxZQUFBLGNBQ0FQLEVBQUEsT0FBQU8sWUFBQSxTQU1BLFFBQUFDLEtBQ0FSLEVBQUEsU0FBQU8sWUFBQSxvQkFDQVAsRUFBQSxjQUFBTyxZQUFBLGNBQ0FQLEVBQUEsT0FBQU8sWUFBQSxTQXJFQVAsRUFBQSxjQVNBQSxFQUFBLGVBQUFTLE1BQUEsU0FBQUMsR0FDQUEsRUFBQUMsaUJBQ0FYLEVBQUEsYUFBQVksU0FBQVQsS0FBQVUsS0FBQVYsS0FBQVUsTUFDQUMsZUFXQSxLQUFBLEdBRkFDLEdBQUFmLEVBQUEsVUFBQWdCLFdBQ0FDLEtBQ0FDLEVBQUEsRUFBQUEsRUFBQUgsRUFBQUksT0FBQUQsSUFBQSxDQUNBLEdBQUFFLEdBQUFMLEVBQUFHLEdBQ0FHLEVBQUFyQixFQUFBb0IsR0FBQUUsS0FBQSxPQUNBTCxHQUFBTSxLQUFBRixHQUdBckIsRUFBQUosR0FBQTRCLE9BQUEsV0FLQSxJQUFBLEdBSkFDLEdBQUF6QixFQUFBSixHQUFBOEIsWUFDQUMsRUFBQTNCLEVBQUFKLEdBQUFnQyxTQUNBQyxFQUFBN0IsRUFBQUksR0FBQXdCLFNBRUFWLEVBQUEsRUFBQUEsRUFBQUQsRUFBQUUsT0FBQUQsSUFBQSxDQUNBLEdBQUFZLEdBQUFiLEVBQUFDLEdBQ0FhLEVBQUEvQixFQUFBOEIsR0FBQWhCLFNBQUFrQixJQUNBQyxFQUFBakMsRUFBQThCLEdBQUFGLFFBQ0FILElBQUFNLEdBQUFOLEVBQUFNLEVBQUFFLEVBQ0FqQyxFQUFBLFdBQUE4QixFQUFBLE1BQUFJLFNBQUEsVUFFQWxDLEVBQUEsV0FBQThCLEVBQUEsTUFBQUssWUFBQSxVQUlBLEdBQUFWLEVBQUFFLEdBQUFFLElBQ0E3QixFQUFBLHVCQUFBb0MsU0FBQSxVQUFBLENBQ0EsR0FBQUMsR0FBQXJDLEVBQUEsV0FBQXNCLEtBQUEsT0FDQXRCLEdBQUEsV0FBQXFDLEVBQUEsTUFBQUYsWUFBQSxjQUNBbkMsRUFBQSx1QkFBQWtDLFNBQUEsYUFNQXZDLE9BQUEsU0FBQWMsTUFBQUgsR0FTQVgsT0FBQSxTQUFBYyxNQUFBRCxHQVVBUixFQUFBLFVBQUFzQyxTQUNBQyxhQUFBLGFBRUFDLGlCQUFBLEVBQ0FDLFNBQ0FDLFlBQUEsaUJBSUEvQyxPQUFBQyxPQUFBUSIsImZpbGUiOiJzY3JpcHRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImpRdWVyeSh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24oKXtcblxuICBmdW5jdGlvbiBwcmVsb2FkKGFycmF5T2ZJbWFnZXMpIHtcbiAgICAgICQoYXJyYXlPZkltYWdlcykuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICQoJzxpbWcvPicpWzBdLnNyYyA9IHRoaXM7XG4gICAgICAgICAgLy8gQWx0ZXJuYXRpdmVseSB5b3UgY291bGQgdXNlOlxuICAgICAgICAgIC8vIChuZXcgSW1hZ2UoKSkuc3JjID0gdGhpcztcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJlbG9hZChbXG4gICAgJy4uL2Fzc2V0cy9pbWcvYWJvdXQuanBnJyxcbiAgICAnLi4vYXNzZXRzL2ltZy9sYW5kaW5nLmpwZycsXG4gICAgJy4uL2Fzc2V0cy9pbWcvd29ya3MvYW1hem9uXzJvbjEuanBnJyxcbiAgICAnLi4vYXNzZXRzL2ltZy93b3Jrcy9jaGVja291dF8yb24yLmpwZycsXG4gICAgJy4uL2Fzc2V0cy9pbWcvd29ya3MvY29udmVyc2VfMm9uMy5qcGcnLFxuICAgICcuLi9hc3NldHMvaW1nL3dvcmtzL2ZicHJvZmlsZV8yb24xLmpwZycsXG4gICAgJy4uL2Fzc2V0cy9pbWcvd29ya3MvZnVlbF8xb24xLmpwZycsXG4gICAgJy4uL2Fzc2V0cy9pbWcvd29ya3Mva29hbGFfMW9uMS5qcGcnLFxuICAgICcuLi9hc3NldHMvaW1nL3dvcmtzL2xvZ2luXzJvbjIuanBnJyxcbiAgICAnLi4vYXNzZXRzL2ltZy93b3Jrcy9tZXRyb18xb24xLmpwZycsXG4gICAgJy4uL2Fzc2V0cy9pbWcvd29ya3MvbnJfMW9uMS5qcGcnLFxuICAgICcuLi9hc3NldHMvaW1nL3dvcmtzL251ZGVfMW9uMy5qcGcnLFxuICAgICcuLi9hc3NldHMvaW1nL3dvcmtzL3hwXzFvbjIuanBnJ1xuICBdKTtcblxufSk7XG5cbihmdW5jdGlvbiAoJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuXG4gICQoZnVuY3Rpb24gKCkge1xuXG4gIH0pOyAvL0Z1bmN0aW9uIGVuZFxuXG4gIC8vIHNjcm9sbFRvXG5cbiAgLy8gVGhpcyBwYXJ0IGNhdXNlcyBzbW9vdGggc2Nyb2xsaW5nIHVzaW5nIHNjcm9sbHRvLmpzXG4gIC8vIFdlIHRhcmdldCBhbGwgYSB0YWdzIGluc2lkZSB0aGUgbmF2LCBhbmQgYXBwbHkgdGhlIHNjcm9sbHRvLmpzIHRvIGl0LlxuXG4gICQoXCJuYXYgdWwgbGkgYVwiKS5jbGljayhmdW5jdGlvbihldm4pe1xuICAgICAgZXZuLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAkKCdodG1sLGJvZHknKS5zY3JvbGxUbyh0aGlzLmhhc2gsIHRoaXMuaGFzaCwge1xuICAgICAgICBvZmZzZXQ6IC0xMDAsXG4gICAgICB9KTtcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFRoaXMgcGFydCBoYW5kbGVzIHRoZSBoaWdobGlnaHRpbmcgZnVuY3Rpb25hbGl0eS5cbiAgICogV2UgdXNlIHRoZSBzY3JvbGwgZnVuY3Rpb25hbGl0eSBhZ2Fpbiwgc29tZSBhcnJheSBjcmVhdGlvbiBhbmRcbiAgICogbWFuaXB1bGF0aW9uLCBjbGFzcyBhZGRpbmcgYW5kIGNsYXNzIHJlbW92aW5nLCBhbmQgY29uZGl0aW9uYWwgdGVzdGluZ1xuICAgKi9cbiAgdmFyIGFDaGlsZHJlbiA9ICQoXCJuYXYgbGlcIikuY2hpbGRyZW4oKTsgLy8gZmluZCB0aGUgYSBjaGlsZHJlbiBvZiB0aGUgbGlzdCBpdGVtc1xuICB2YXIgYUFycmF5ID0gW107IC8vIGNyZWF0ZSB0aGUgZW1wdHkgYUFycmF5XG4gIGZvciAodmFyIGk9MDsgaSA8IGFDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGFDaGlsZCA9IGFDaGlsZHJlbltpXTtcbiAgICAgIHZhciBhaHJlZiA9ICQoYUNoaWxkKS5hdHRyKCdocmVmJyk7XG4gICAgICBhQXJyYXkucHVzaChhaHJlZik7XG4gIH0gLy8gdGhpcyBmb3IgbG9vcCBmaWxscyB0aGUgYUFycmF5IHdpdGggYXR0cmlidXRlIGhyZWYgdmFsdWVzXG5cbiAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbigpe1xuICAgICAgdmFyIHdpbmRvd1BvcyA9ICQod2luZG93KS5zY3JvbGxUb3AoKTsgLy8gZ2V0IHRoZSBvZmZzZXQgb2YgdGhlIHdpbmRvdyBmcm9tIHRoZSB0b3Agb2YgcGFnZVxuICAgICAgdmFyIHdpbmRvd0hlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKTsgLy8gZ2V0IHRoZSBoZWlnaHQgb2YgdGhlIHdpbmRvd1xuICAgICAgdmFyIGRvY0hlaWdodCA9ICQoZG9jdW1lbnQpLmhlaWdodCgpO1xuXG4gICAgICBmb3IgKHZhciBpPTA7IGkgPCBhQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgdGhlSUQgPSBhQXJyYXlbaV07XG4gICAgICAgICAgdmFyIGRpdlBvcyA9ICQodGhlSUQpLm9mZnNldCgpLnRvcDsgLy8gZ2V0IHRoZSBvZmZzZXQgb2YgdGhlIGRpdiBmcm9tIHRoZSB0b3Agb2YgcGFnZVxuICAgICAgICAgIHZhciBkaXZIZWlnaHQgPSAkKHRoZUlEKS5oZWlnaHQoKTsgLy8gZ2V0IHRoZSBoZWlnaHQgb2YgdGhlIGRpdiBpbiBxdWVzdGlvblxuICAgICAgICAgIGlmICh3aW5kb3dQb3MgPj0gZGl2UG9zICYmIHdpbmRvd1BvcyA8IChkaXZQb3MgKyBkaXZIZWlnaHQpKSB7XG4gICAgICAgICAgICAgICQoXCJhW2hyZWY9J1wiICsgdGhlSUQgKyBcIiddXCIpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICQoXCJhW2hyZWY9J1wiICsgdGhlSUQgKyBcIiddXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYod2luZG93UG9zICsgd2luZG93SGVpZ2h0ID09IGRvY0hlaWdodCkge1xuICAgICAgICAgIGlmICghJChcIm5hdiBsaTpsYXN0LWNoaWxkIGFcIikuaGFzQ2xhc3MoXCJhY3RpdmVcIikpIHtcbiAgICAgICAgICAgICAgdmFyIG5hdkFjdGl2ZUN1cnJlbnQgPSAkKFwiLmFjdGl2ZVwiKS5hdHRyKFwiaHJlZlwiKTtcbiAgICAgICAgICAgICAgJChcImFbaHJlZj0nXCIgKyBuYXZBY3RpdmVDdXJyZW50ICsgXCInXVwiKS5yZW1vdmVDbGFzcyhcIm5hdi1hY3RpdmVcIik7XG4gICAgICAgICAgICAgICQoXCJuYXYgbGk6bGFzdC1jaGlsZCBhXCIpLmFkZENsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgfSk7XG5cbiAgLy8gbWVudUJ1dHRvbiAtIGFjdGlvblxuICBqUXVlcnkoXCIjbWVudVwiKS5jbGljayhjaGFuZ2VDbGFzcyk7XG5cbiAgZnVuY3Rpb24gY2hhbmdlQ2xhc3MoKSB7XG4gICAgICQodGhpcykudG9nZ2xlQ2xhc3MoXCJtZW51QnV0dG9uLWNsb3NlXCIpO1xuICAgICAkKCdib2R5LCBodG1sJykudG9nZ2xlQ2xhc3MoXCJtZW51T3BlbmVkXCIpO1xuICAgICAkKCduYXYnKS50b2dnbGVDbGFzcyhcImNsb3NlXCIpO1xuICAgICAvLyQoJ2hlYWRlcicpLnRvZ2dsZUNsYXNzKFwiZml4ZWQgYWJzb2x1dGVcIik7XG4gIH1cblxuICBqUXVlcnkoXCJuYXYgYVwiKS5jbGljayhjbG9zZU5hdik7XG5cbiAgZnVuY3Rpb24gY2xvc2VOYXYoKSB7XG4gICAgICQoJyNtZW51JykudG9nZ2xlQ2xhc3MoXCJtZW51QnV0dG9uLWNsb3NlXCIpO1xuICAgICAkKCdib2R5LCBodG1sJykudG9nZ2xlQ2xhc3MoXCJtZW51T3BlbmVkXCIpO1xuICAgICAkKCduYXYnKS50b2dnbGVDbGFzcyhcImNsb3NlXCIpO1xuICAgICAvLyQoJ2hlYWRlcicpLnRvZ2dsZUNsYXNzKFwiZml4ZWQgYWJzb2x1dGVcIik7XG4gIH1cblxuICAvLyB3b3JrcyAtIGdyaWRcbiAgJCgnLndvcmtzJykuaXNvdG9wZSh7XG4gICAgaXRlbVNlbGVjdG9yOiAnLndvcmtzQ2VsbCcsXG4gICAgLy9sYXlvdXRNb2RlOiAnZml0Um93cycsXG4gICAgcGVyY2VudFBvc2l0aW9uOiB0cnVlLFxuICAgIG1hc29ucnk6IHtcbiAgICAgIGNvbHVtbldpZHRoOiAnLndvcmtzQ2VsbCdcbiAgICB9XG4gIH0pO1xuXG59KShqUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xuIl19
